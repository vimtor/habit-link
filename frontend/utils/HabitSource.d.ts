/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers, EventFilter, Signer, BigNumber, BigNumberish, PopulatedTransaction } from "ethers";
import { Contract, ContractTransaction, Overrides, CallOverrides } from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface HabitSourceInterface extends ethers.utils.Interface {
    functions: {
        "addProgress(address,uint256)": FunctionFragment;
        "registerActivity()": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "addProgress", values: [string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "registerActivity", values?: undefined): string;

    decodeFunctionResult(functionFragment: "addProgress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerActivity", data: BytesLike): Result;

    events: {};
}

export class HabitSource extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    on(event: EventFilter | string, listener: Listener): this;
    once(event: EventFilter | string, listener: Listener): this;
    addListener(eventName: EventFilter | string, listener: Listener): this;
    removeAllListeners(eventName: EventFilter | string): this;
    removeListener(eventName: any, listener: Listener): this;

    interface: HabitSourceInterface;

    functions: {
        addProgress(to: string, progress: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

        "addProgress(address,uint256)"(to: string, progress: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

        registerActivity(overrides?: Overrides): Promise<ContractTransaction>;

        "registerActivity()"(overrides?: Overrides): Promise<ContractTransaction>;
    };

    addProgress(to: string, progress: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    "addProgress(address,uint256)"(to: string, progress: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    registerActivity(overrides?: Overrides): Promise<ContractTransaction>;

    "registerActivity()"(overrides?: Overrides): Promise<ContractTransaction>;

    callStatic: {
        addProgress(to: string, progress: BigNumberish, overrides?: CallOverrides): Promise<void>;

        "addProgress(address,uint256)"(to: string, progress: BigNumberish, overrides?: CallOverrides): Promise<void>;

        registerActivity(overrides?: CallOverrides): Promise<void>;

        "registerActivity()"(overrides?: CallOverrides): Promise<void>;
    };

    filters: {};

    estimateGas: {
        addProgress(to: string, progress: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        "addProgress(address,uint256)"(to: string, progress: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

        registerActivity(overrides?: Overrides): Promise<BigNumber>;

        "registerActivity()"(overrides?: Overrides): Promise<BigNumber>;
    };

    populateTransaction: {
        addProgress(to: string, progress: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

        "addProgress(address,uint256)"(to: string, progress: BigNumberish, overrides?: Overrides): Promise<PopulatedTransaction>;

        registerActivity(overrides?: Overrides): Promise<PopulatedTransaction>;

        "registerActivity()"(overrides?: Overrides): Promise<PopulatedTransaction>;
    };
}
