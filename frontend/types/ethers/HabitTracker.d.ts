/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    BaseContract,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface HabitTrackerInterface extends ethers.utils.Interface {
    functions: {
        "addProgress(address,string,uint256)": FunctionFragment;
        "cancelGoal(address,string)": FunctionFragment;
        "company()": FunctionFragment;
        "completeGoal(address,string)": FunctionFragment;
        "createGoal(address,string,string,uint8,uint256,uint256,string,uint256)": FunctionFragment;
        "failGoal(address,string)": FunctionFragment;
        "getGoal(address,string)": FunctionFragment;
        "getGoals(address)": FunctionFragment;
        "goals(address,string)": FunctionFragment;
    };

    encodeFunctionData(functionFragment: "addProgress", values: [string, string, BigNumberish]): string;
    encodeFunctionData(functionFragment: "cancelGoal", values: [string, string]): string;
    encodeFunctionData(functionFragment: "company", values?: undefined): string;
    encodeFunctionData(functionFragment: "completeGoal", values: [string, string]): string;
    encodeFunctionData(
        functionFragment: "createGoal",
        values: [string, string, string, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "failGoal", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getGoal", values: [string, string]): string;
    encodeFunctionData(functionFragment: "getGoals", values: [string]): string;
    encodeFunctionData(functionFragment: "goals", values: [string, string]): string;

    decodeFunctionResult(functionFragment: "addProgress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelGoal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "company", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "completeGoal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createGoal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "failGoal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGoal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getGoals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "goals", data: BytesLike): Result;

    events: {
        "GoalCancelled(address,string)": EventFragment;
        "GoalCompleted(address,string)": EventFragment;
        "GoalFailed(address,string)": EventFragment;
        "GoalStarted(address,string)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "GoalCancelled"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GoalCompleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GoalFailed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "GoalStarted"): EventFragment;
}

export class HabitTracker extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: HabitTrackerInterface;

    functions: {
        addProgress(
            _user: string,
            _name: string,
            _value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        cancelGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        company(overrides?: CallOverrides): Promise<[string]>;

        completeGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        createGoal(
            _user: string,
            _name: string,
            _description: string,
            _category: BigNumberish,
            _progress: BigNumberish,
            _target: BigNumberish,
            _unit: string,
            _deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        failGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

        getGoal(
            _user: string,
            _name: string,
            overrides?: CallOverrides
        ): Promise<
            [
                [string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
                    name: string;
                    description: string;
                    category: number;
                    progress: BigNumber;
                    initial: BigNumber;
                    target: BigNumber;
                    unit: string;
                    deadline: BigNumber;
                    bounty: BigNumber;
                    status: number;
                    createdOn: BigNumber;
                }
            ]
        >;

        getGoals(
            _user: string,
            overrides?: CallOverrides
        ): Promise<
            [
                ([string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
                    name: string;
                    description: string;
                    category: number;
                    progress: BigNumber;
                    initial: BigNumber;
                    target: BigNumber;
                    unit: string;
                    deadline: BigNumber;
                    bounty: BigNumber;
                    status: number;
                    createdOn: BigNumber;
                })[]
            ]
        >;

        goals(
            arg0: string,
            arg1: string,
            overrides?: CallOverrides
        ): Promise<
            [string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
                name: string;
                description: string;
                category: number;
                progress: BigNumber;
                initial: BigNumber;
                target: BigNumber;
                unit: string;
                deadline: BigNumber;
                bounty: BigNumber;
                status: number;
                createdOn: BigNumber;
            }
        >;
    };

    addProgress(_user: string, _name: string, _value: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    cancelGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    company(overrides?: CallOverrides): Promise<string>;

    completeGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    createGoal(
        _user: string,
        _name: string,
        _description: string,
        _category: BigNumberish,
        _progress: BigNumberish,
        _target: BigNumberish,
        _unit: string,
        _deadline: BigNumberish,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    failGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    getGoal(
        _user: string,
        _name: string,
        overrides?: CallOverrides
    ): Promise<
        [string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
            name: string;
            description: string;
            category: number;
            progress: BigNumber;
            initial: BigNumber;
            target: BigNumber;
            unit: string;
            deadline: BigNumber;
            bounty: BigNumber;
            status: number;
            createdOn: BigNumber;
        }
    >;

    getGoals(
        _user: string,
        overrides?: CallOverrides
    ): Promise<
        ([string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
            name: string;
            description: string;
            category: number;
            progress: BigNumber;
            initial: BigNumber;
            target: BigNumber;
            unit: string;
            deadline: BigNumber;
            bounty: BigNumber;
            status: number;
            createdOn: BigNumber;
        })[]
    >;

    goals(
        arg0: string,
        arg1: string,
        overrides?: CallOverrides
    ): Promise<
        [string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
            name: string;
            description: string;
            category: number;
            progress: BigNumber;
            initial: BigNumber;
            target: BigNumber;
            unit: string;
            deadline: BigNumber;
            bounty: BigNumber;
            status: number;
            createdOn: BigNumber;
        }
    >;

    callStatic: {
        addProgress(_user: string, _name: string, _value: BigNumberish, overrides?: CallOverrides): Promise<void>;

        cancelGoal(_user: string, _name: string, overrides?: CallOverrides): Promise<void>;

        company(overrides?: CallOverrides): Promise<string>;

        completeGoal(_user: string, _name: string, overrides?: CallOverrides): Promise<void>;

        createGoal(
            _user: string,
            _name: string,
            _description: string,
            _category: BigNumberish,
            _progress: BigNumberish,
            _target: BigNumberish,
            _unit: string,
            _deadline: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        failGoal(_user: string, _name: string, overrides?: CallOverrides): Promise<void>;

        getGoal(
            _user: string,
            _name: string,
            overrides?: CallOverrides
        ): Promise<
            [string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
                name: string;
                description: string;
                category: number;
                progress: BigNumber;
                initial: BigNumber;
                target: BigNumber;
                unit: string;
                deadline: BigNumber;
                bounty: BigNumber;
                status: number;
                createdOn: BigNumber;
            }
        >;

        getGoals(
            _user: string,
            overrides?: CallOverrides
        ): Promise<
            ([string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
                name: string;
                description: string;
                category: number;
                progress: BigNumber;
                initial: BigNumber;
                target: BigNumber;
                unit: string;
                deadline: BigNumber;
                bounty: BigNumber;
                status: number;
                createdOn: BigNumber;
            })[]
        >;

        goals(
            arg0: string,
            arg1: string,
            overrides?: CallOverrides
        ): Promise<
            [string, string, number, BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber, number, BigNumber] & {
                name: string;
                description: string;
                category: number;
                progress: BigNumber;
                initial: BigNumber;
                target: BigNumber;
                unit: string;
                deadline: BigNumber;
                bounty: BigNumber;
                status: number;
                createdOn: BigNumber;
            }
        >;
    };

    filters: {
        GoalCancelled(_from?: string | null, _name?: string | null): TypedEventFilter<[string, string], { _from: string; _name: string }>;

        GoalCompleted(_from?: string | null, _name?: string | null): TypedEventFilter<[string, string], { _from: string; _name: string }>;

        GoalFailed(_from?: string | null, _name?: string | null): TypedEventFilter<[string, string], { _from: string; _name: string }>;

        GoalStarted(_from?: string | null, _name?: string | null): TypedEventFilter<[string, string], { _from: string; _name: string }>;
    };

    estimateGas: {
        addProgress(_user: string, _name: string, _value: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        cancelGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        company(overrides?: CallOverrides): Promise<BigNumber>;

        completeGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        createGoal(
            _user: string,
            _name: string,
            _description: string,
            _category: BigNumberish,
            _progress: BigNumberish,
            _target: BigNumberish,
            _unit: string,
            _deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        failGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

        getGoal(_user: string, _name: string, overrides?: CallOverrides): Promise<BigNumber>;

        getGoals(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

        goals(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
    };

    populateTransaction: {
        addProgress(
            _user: string,
            _name: string,
            _value: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        cancelGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        company(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        completeGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        createGoal(
            _user: string,
            _name: string,
            _description: string,
            _category: BigNumberish,
            _progress: BigNumberish,
            _target: BigNumberish,
            _unit: string,
            _deadline: BigNumberish,
            overrides?: PayableOverrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        failGoal(_user: string, _name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

        getGoal(_user: string, _name: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        getGoals(_user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

        goals(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
